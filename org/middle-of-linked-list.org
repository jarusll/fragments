#+title: Middle of Linked List
#+date: 2022-05-29
#+draft: true

* 2 Pointers
  
  - In the list =1->2->3->4->5=, =S= and =F= point to 1. What are =S= and =F= when =S= moves by 1 element and =F= moves by 2 elements?
    - =S= is slow pointer and =F= is fast pointer

  - Will =S= travel half the distance of =F= at any given point?
    - Yes, since =F= is twice as fast as =S=
      
  - Will =S= be at middle of list when =F= is at the end?
    - Yes
      
  - Do we have our base case and reduction case?
    - Yes we do

* Code
  
  Defining ListNode 

  #+NAME: structure-def
  #+BEGIN_SRC ruby
class ListNode
  attr_accessor :val, :next
  def initialize(val = 0, _next = nil)
    @val = val
    @next = _next
  end
end
  #+END_SRC

  Center method

  #+NAME: center
  #+BEGIN_SRC ruby :noweb no
class ListNode
  def center(slow = self, fast = self)
      <<base-case>>
      <<reduction-case>>
  end
end
  #+END_SRC

**  BASE CASE
   If the =fast= pointer is at the end, =slow= is at mid.

  #+NAME: base-case
  #+BEGIN_SRC ruby
if not (fast.next and fast.next.next)
  return slow
end
  #+END_SRC

** REDUCTION CASE

   We keep moving =slow= by 1 and =fast= by 2 to reach closer to base case

  #+NAME: reduction-case
  #+BEGIN_SRC ruby
return center(slow.next, fast.next.next)
  #+END_SRC

* Testing

  Defining utility to create a LinkedList from array

  #+NAME: util
  #+BEGIN_SRC ruby 
def list_from_array(array)
  if array.length == 0
    return nil
  end
  node = ListNode.new(array[0])
  node.next = list_from_array(array.drop(1))
  return node
end

  #+END_SRC

  Test code

  #+NAME: test
  #+BEGIN_SRC ruby :noweb yes :results output :exports both

<<structure-def>>

class ListNode
  def center(slow = self, fast = self)
      <<base-case>>
      <<reduction-case>>
  end
end

<<util>>

  #+END_SRC


** Testing even length list

   #+BEGIN_SRC ruby :noweb strip-export :exports both :results output
   
   <<test>>
   puts list_from_array(Array(1..10)).center.val

   #+END_SRC

   #+RESULTS:
   : 5

** Testing odd length list

   #+BEGIN_SRC ruby :noweb strip-export :exports both :results output
   
   <<test>>
   puts list_from_array(Array(1..11)).center.val

   #+END_SRC

   #+RESULTS:
   : 6
